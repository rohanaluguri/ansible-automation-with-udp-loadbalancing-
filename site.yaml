---
- hosts: webservers
  gather_facts: yes
  become: yes
  tasks:
  - name: apt update
    apt:
      update_cache: yes

  - name: Installing pip3
    apt:
      name: python3-pip
      state: latest

  - name: Installing flask
    pip:
      executable: pip3
      name: flask
      state: latest

  - name: Installing system packages
    apt:
      pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - python3-pip
        - virtualenv
        - python3-setuptools
        - snmp
        - snmp-mibs-downloader
      state: latest
      update_cache: true

  - name: Installing snmpd
    apt:
      name: snmpd
      state: latest

  - name: Installing nginx
    apt:
      name: nginx
      state: latest

  - name: Setting up nginx file
    copy:
      src: "./nginx.conf"
      dest: /etc/nginx/sites-available/default

  - name: Start nginx
    service:
      name: nginx
      state: started

  - name: Configuring snmpd
    copy:
      src: "./snmpd.conf"
      dest: /etc/snmp/snmpd.conf

  - name: Start snmp
    service:
      name: snmpd
      state: restarted 
    become: yes
  - name: Installing Docker
    shell: cd ~ && curl -fsSL https://get.docker.com -o get-docker.sh && sudo sh get-docker.sh

  - name: pip install docker
    pip:
      executable: pip3
      name: docker
      state: latest

  - name: create a directory named web
    file:
      path: /home/ubuntu/web
      state: directory

  - name: Setting Dockerfile
    copy:
      src: "./Dockerfile"
      dest: /home/ubuntu/web

  - name: Change file ownership, group and permissions
    ansible.builtin.file:
      path: /home/ubuntu/web/Dockerfile
      owner: root
      group: root
      mode: '0777'

  - name: Setting app.ini
    copy:
      src: "./app.ini"
      dest: /home/ubuntu/web

  - name: Setting nginx conf file
    copy:
      src: "./nginx.conf"
      dest: /home/ubuntu/web

  - name: Setting requirements file
    copy:
      src: "./requirements.txt"
      dest: /home/ubuntu/web

  - name: Setting app.py
    copy:
      src: "./app.py"
      dest: /home/ubuntu/web

  - name: Setting start
    copy:
      src: "./start.sh"
      dest: /home/ubuntu/web

  - name: Build docker image
    docker_image:
      name: flask
      build:
        pull: yes
        path: /home/ubuntu/web
      state: present
      source: build

  - name: launch docker container
    docker_container:
      name: flask
      image: flask
      state: started
      ports:
        - 8008:4000
    register: docker_info

  - name: Installing req.txt
    pip:
      requirements: /home/ubuntu/web/requirements.txt

  - name: Run flask app
    shell: "(cd web; python3 app.py >/dev/null 2>&1 &)"
    async: 10
    poll: 0

- hosts: HAproxy
  become: yes
  tasks:

    - name: apt update
      apt:
        update_cache: yes
    
    - name: Installing haproxy
      apt:
        name: haproxy
        state: present
    
    - name: Configuring haproxy
      template:
        src: ./haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
    - name: Restart haproxy
      service:
        name: haproxy
        state: restarted
  
- hosts: HAproxy  
  become: yes  
  tasks:

    - name: HAproxy redumentary test 1
      uri:
        url: "http://localhost/"
        return_content: yes
      register: html_body
    - debug: msg='{{ html_body.content }}'

    - name: HAproxy redumentary test 2
      uri:
        url: "http://localhost/"
        return_content: yes
      register: html_body
    - debug: msg='{{ html_body.content }}'

    - name: HAproxy redumentary test 3
      uri:
        url: "http://localhost/"
        return_content: yes
      register: html_body
    - debug: msg='{{ html_body.content }}'

